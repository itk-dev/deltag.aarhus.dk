version: "3"

# https://taskfile.dev/usage/#env-files
dotenv: [".env.local", ".env"]

vars:
  # https://taskfile.dev/reference/templating/
  BASE_URL: '{{.TASK_BASE_URL | default .COMPOSE_SERVER_DOMAIN | default .COMPOSE_DOMAIN | default "https://deltag.local.itkdev.dk"}}'
  DOCKER_COMPOSE: '{{.TASK_DOCKER_COMPOSE | default "docker compose"}}'
  DOCKER_COMPOSE_PROFILES: '{{.TASK_DOCKER_COMPOSE_PROFILES | default ""}}'
  COMPOSER_INSTALL_ARGUMENTS: '{{.TASK_COMPOSER_INSTALL_ARGUMENTS | default ""}}'

  PRETIX_URL: '{{.TASK_PRETIX_URL | default "http://pretix.deltag.local.itkdev.dk"}}'
  PRETIX_ORGANIZER: '{{.TASK_PRETIX_ORGANIZER | default "dpl-cms"}}'

tasks:
  default:
    cmds:
      - task --list-all
    silent: true

  site-install:
    prompt: "This will reset your setup. Continue?"
    cmds:
      - task compose -- down
      - task compose -- pull
      - task compose-up
      - task composer-install
      - task drush -- --yes site:install --existing-config
      - task: translations:import
      - task drush -- --yes cache:rebuild
      - task assets-build
      - task site-open
      - task site-open-admin
    silent: true

  site-update:
    cmds:
      - task compose -- pull
      - task compose-up
      - task composer-install
      - task assets-build
      - task drush -- deploy
      - task: translations:import
      - task drush -- --yes cache:rebuild
    silent: true

  site-url:
    cmds:
      - task drush -- browse --no-browser
    silent: true

  site-open:
    cmds:
      - if command -v open 2>&1 >/dev/null; then open "$(task site-url)"; else echo "$(task site-url)"; fi
    silent: true

  site-open-admin:
    cmds:
      - if command -v open 2>&1 >/dev/null; then open "{{.URL}}"; else echo "{{.URL}}"; fi
    vars:
      URL:
        sh: task drush -- user:login --no-browser
    silent: true

  assets-build:
    cmds:
      - |
        if [[ -z "{{.SKIP_BUILD}}" ]]; then
          {{.DOCKER_COMPOSE}} run --rm node npm install --prefix web/themes/custom/hoeringsportal
          {{.DOCKER_COMPOSE}} run --rm node npm run build --prefix web/themes/custom/hoeringsportal
        fi
    vars:
      SKIP_BUILD: "{{.ASSETS_SKIP_BUILD | default .TASK_ASSETS_SKIP_BUILD}}"

  assets-watch:
    cmds:
      - "{{.DOCKER_COMPOSE}} run --rm node npm run watch --prefix web/themes/custom/hoeringsportal"

  compose:
    cmds:
      - '{{.DOCKER_COMPOSE}} {{if .DOCKER_COMPOSE_PROFILES}}--profile {{.DOCKER_COMPOSE_PROFILES | splitList "," |join " --profile " }}{{end}} {{.CLI_ARGS}}'
    vars:
      DOCKER_COMPOSE_PROFILES: "{{.PROFILES | default .DOCKER_COMPOSE_PROFILES}}"

  compose-up:
    cmds:
      - task compose -- up --detach --remove-orphans {{if .COMPOSE_UP_WAIT}}--wait{{end}}
    silent: true

  composer:
    cmds:
      - task compose -- exec phpfpm composer {{.CLI_ARGS}}
    silent: true

  composer-install:
    cmds:
      - task composer -- install {{.COMPOSER_INSTALL_ARGUMENTS}} {{.CLI_ARGS}}
    silent: true

  drush:
    cmds:
      # Check if we have content on stdin (cf.
      # https://unix.stackexchange.com/questions/762992/bash-check-if-the-standard-input-contains-anything)
      - >-
        if [[ ! -t 0 ]]; then
          task compose -- exec --no-TTY phpfpm {{.DRUSH_SCRIPT}} --uri={{.BASE_URL}} {{.CLI_ARGS}};
        else
          task compose -- exec phpfpm {{.DRUSH_SCRIPT}} --uri={{.BASE_URL}} {{.CLI_ARGS}};
        fi
    vars:
      # Note: We use vendor/bin/drush.php (rather than vendor/bin/drush, say) to
      # make debugging work for Drush commands.
      DRUSH_SCRIPT: vendor/bin/drush.php
    silent: true

  database-dump:
    cmds:
      # Make sure that site is up to date
      - task site-update
      - task drush -- sql:dump --extra-dump='--skip-column-statistics' --structure-tables-list="cache,cache_*,advancedqueue,history,search_*,sessions,watchdog" --gzip --result-file=/app/.docker/drupal/dumps/drupal.sql

  pretix:
    cmds:
      - task compose -- exec pretix pretix {{.CLI_ARGS}}
    silent: true

  pretix:database-dump:
    cmds:
      - task compose -- exec --env PGPASSWORD=pretix pretix_database pg_dump --user=pretix pretix > .docker/pretix/dumps/pretix.sql

  pretix:database-cli:
    cmds:
      - task compose -- exec --env PGPASSWORD=pretix pretix_database psql --user=pretix pretix

  pretix:database-reset:
    prompt: "This will reset your pretix database. Continue?"
    cmds:
      # Remove the pretix database container
      - task compose -- rm pretix_database --stop --force
      # Starting the container will load dump from .docker/pretix/dumps (cf. docker-compose.pretix.yml).
      - task compose -- up --detach
      # https://docs.pretix.eu/en/latest/admin/installation/docker_smallscale.html#updates
      - task compose -- exec pretix pretix upgrade

  pretix:database-load:
    prompt: "This will reset your pretix database. Continue?"
    cmds:
      - task compose -- exec --no-TTY --env PGPASSWORD=pretix pretix_database psql --quiet --user=pretix pretix <<< "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
      - task compose -- exec --no-TTY --env PGPASSWORD=pretix pretix_database psql --quiet --user=pretix pretix < .docker/pretix/dumps/pretix.sql
      # https://docs.pretix.eu/en/latest/admin/installation/docker_smallscale.html#updates
      - task pretix -- upgrade

  pretix:api-ping:
    vars:
      API_TOKEN:
        sh: task compose -- exec --no-TTY --env PGPASSWORD=pretix pretix_database psql --user=pretix pretix --tuples-only --csv <<< "SELECT token FROM pretixbase_teamapitoken WHERE name = 'hoeringsportal'"
    cmds:
      - "task compose -- exec phpfpm curl --header 'Authorization: Token {{.API_TOKEN}}' {{.PRETIX_URL}}/api/v1/organizers/"

  coding-standards:apply:
    desc: "Apply coding standards"
    cmds:
      - task: coding-standards:javascript:apply
      - task: coding-standards:markdown:apply
      - task: coding-standards:php:apply
      - task: coding-standards:styles:apply
      - task: coding-standards:twig:apply
      - task: coding-standards:yaml:apply
    silent: true

  coding-standards:check:
    desc: "Apply coding standards"
    cmds:
      - task: coding-standards:javascript:check
      - task: coding-standards:markdown:check
      - task: coding-standards:php:check
      - task: coding-standards:styles:check
      - task: coding-standards:twig:check
      - task: coding-standards:yaml:check
    silent: true

  coding-standards:javascript:apply:
    desc: "Apply coding standards for javascript"
    cmds:
      # Cf. .github/workflows/javascript.yaml
      - docker compose run --rm prettier 'web/themes/custom/**/js/**/*.js' --write

  coding-standards:javascript:check:
    desc: "Apply coding standards for javascript"
    cmds:
      - task: coding-standards:javascript:apply
      # Cf. .github/workflows/javascript.yaml
      - docker compose run --rm prettier 'web/themes/custom/**/js/**/*.js' --check

  coding-standards:markdown:apply:
    desc: "Apply coding standards for Markdown"
    cmds:
      # Cf. .github/workflows/markdown.yaml
      - docker compose run --rm markdownlint markdownlint '**/*.md' --fix

  coding-standards:markdown:check:
    desc: "Apply and check coding standards for Markdown"
    cmds:
      - task: coding-standards:markdown:apply
      # Cf. .github/workflows/markdown.yaml
      - docker compose run --rm markdownlint markdownlint '**/*.md'

  coding-standards:php:apply:
    desc: "Apply coding standards for PHP"
    cmds:
      # Cf. .github/workflows/php.yaml
      - docker compose run --rm phpfpm vendor/bin/phpcbf
    silent: true

  coding-standards:php:check:
    desc: "Apply and check coding standards for PHP"
    cmds:
      - task: coding-standards:php:apply
      # Cf. .github/workflows/php.yaml
      - docker compose run --rm phpfpm vendor/bin/phpcs
    silent: true

  coding-standards:styles:apply:
    desc: "Apply coding standards for styles"
    cmds:
      # Cf. .github/workflows/styles.yaml
      - docker compose run --rm prettier 'web/themes/custom/**/css/**/*.{css,scss}' --write

  coding-standards:styles:check:
    desc: "Apply coding standards for styles"
    cmds:
      - task: coding-standards:styles:apply
      # Cf. .github/workflows/styles.yaml
      - docker compose run --rm prettier 'web/themes/custom/**/css/**/*.{css,scss}' --check

  coding-standards:twig:apply:
    desc: "Apply coding standards for Twig"
    cmds:
      - docker compose run --rm phpfpm vendor/bin/twig-cs-fixer fix
    silent: true

  coding-standards:twig:check:
    desc: "Apply and check coding standards for Twig"
    cmds:
      - task: coding-standards:twig:apply
      - docker compose run --rm phpfpm vendor/bin/twig-cs-fixer lint
    silent: true

  coding-standards:yaml:apply:
    desc: "Apply coding standards for YAML"
    cmds:
      # Cf. .github/workflows/yaml.yaml
      - docker compose run --rm prettier '**/*.{yml,yaml}' --write

  coding-standards:yaml:check:
    desc: "Apply coding standards for YAML"
    cmds:
      - task: coding-standards:yaml:apply
      # Cf. .github/workflows/yaml.yaml
      - docker compose run --rm prettier '**/*.{yml,yaml}' --check

  code-analysis:
    cmds:
      - docker compose run --rm phpfpm vendor/bin/phpstan analyse --configuration=phpstan.neon
      # Check some modules with a higher level.
      #
      # Note: The second `--` is needed to pass command line arguments (starting with `--`) to the composer script
      # `code-analysis`
      #
      # @todo Update all our custom modules to resolve ‘level 9 (or 8) errors“
      - docker compose run --rm phpfpm vendor/bin/phpstan analyse --configuration=phpstan.neon --level=9 web/modules/custom/hoeringsportal_audit_log/

  docker-pull:
    desc: "Pull all development docker images"
    cmds:
      - docker pull jauderho/prettier
      - docker pull peterdavehello/markdownlint
      - task compose -- pull

  fixtures:load:
    prompt: "This will reset your content. Continue?"
    cmds:
      # We need the pretix service to load public meeting fixtures (cf. https://docs.docker.com/compose/how-tos/environment-variables/envvars/#compose_profiles)
      - COMPOSE_PROFILES=pretix COMPOSE_UP_WAIT=true task compose-up
      - task drush -- --yes pm:enable hoeringsportal_base_fixtures $(find web/modules/custom -type f -name 'hoeringsportal_*_fixtures.info.yml' -exec basename -s .info.yml {} \;)
      - task drush -- --yes content-fixtures:load
      - task drush -- --yes pm:uninstall content_fixtures
      # Update states on public meetings.
      - task drush -- --yes hoeringsportal:public_meeting:state-update
      - task compose-up
    silent: true

  translations:import:
    cmds:
      - task compose -- exec phpfpm bash -c '(cd web && ../vendor/bin/drush locale:import --type=customized --override=all da ../translations/custom-translations.da.po)'
      - task drush -- php:eval "var_export(\Drupal::state()->get('locale.translation.formulae', []))"
      - 'task drush -- php:eval "var_export(array_map(static fn (\$count) => (new \Drupal\Core\StringTranslation\PluralTranslatableMarkup(\$count, ''1 item'', ''@count items'', options: [''langcode'' => ''da'']))->render(), range(0, 5)));"'
      - 'task drush -- php:eval "var_export(array_map(static fn (\$count) => (new \Drupal\Core\StringTranslation\PluralTranslatableMarkup(\$count, ''1 item'', ''@count items'', options: [''langcode'' => ''en'']))->render(), range(0, 5)));"'
    silent: true

  translations:export:
    cmds:
      - task compose -- exec phpfpm bash -c '(cd web && ../vendor/bin/drush locale:export da --types=customized > ../translations/custom-translations.da.po)'
      # Fix plurals spec in PO file
      # https://drupalsun.com/eelke/2020/08/17/tale-mistranslated-plurals
      # https://www.drupal.org/project/drupal/issues/3496223
      - 'task compose -- exec phpfpm sed -i "s/Plural-Forms: nplurals=2; plural=(n > 1);/Plural-Forms: nplurals=2; plural=(n != 1);/" translations/custom-translations.da.po'
    silent: true

  # Development settings tasks (`/admin/config/development/settings`) (cf. https://www.drupal.org/docs/develop/development-tools/disabling-and-debugging-caching).

  development-settings:do-not-cache-markup-enable:
    desc: Disable markup cache (check ‘Do not cache markup“ on `/admin/config/development/settings`)
    cmds:
      - task drush -- php:eval "Drupal::keyValue('development_settings')->setMultiple(['disable_rendered_output_cache_bins' => TRUE]);"
      - task drush -- cache:rebuild

  development-settings:do-not-cache-markup-disable:
    desc: Enable markup cache (for production) (uncheck ‘Do not cache markup“ on `/admin/config/development/settings`)
    cmds:
      - task drush -- php:eval "Drupal::keyValue('development_settings')->setMultiple(['disable_rendered_output_cache_bins' => FALSE]);"
      - task drush -- cache:rebuild

  development-settings:twig-develoment-mode-enable:
    desc: Enable Twig development mode (check ‘Twig development mode“ on `/admin/config/development/settings`)
    cmds:
      - task drush -- php:eval "Drupal::keyValue('development_settings')->setMultiple(['twig_debug' => TRUE, 'twig_cache_disable' => TRUE]);"
      - task drush -- cache:rebuild

  development-settings:twig-develoment-mode-disable:
    desc: Disable Twig development mode (for production) (uncheck ‘Twig development mode“ on `/admin/config/development/settings`)
    cmds:
      - task drush -- php:eval "Drupal::keyValue('development_settings')->setMultiple(['twig_debug' => FALSE, 'twig_cache_disable' => FALSE]);"
      - task drush -- cache:rebuild

  development-settings:development:
    desc: Set cache settings for development
    cmds:
      - task development-settings:do-not-cache-markup-enable
      - task development-settings:twig-develoment-mode-enable
      - task drush -- cache:rebuild
    silent: true

  development-settings:production:
    desc: Set cache settings for production
    cmds:
      - task development-settings:do-not-cache-markup-disable
      - task development-settings:twig-develoment-mode-disable
      - task drush -- cache:rebuild
    silent: true
