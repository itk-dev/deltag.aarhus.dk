<?php

/**
 * @file
 * Installation file for the itk_pretix module.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\node\Entity\Node;

/**
 * Implements hook_schema().
 */
function hoeringsportal_deskpro_schema() {
  return [
    'hoeringsportal_deskpro_deskpro_tickets' => [
      'description' => 'Table to hold information about Deskpro tickets for nodes.',
      'fields' => [
        'entity_type' => [
          'description' => 'The entity type',
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
        ],
        'entity_id' => [
          'description' => 'The entity id',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'bundle' => [
          'description' => 'The entity bundle',
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
        ],
        'ticket_id' => [
          'description' => 'The ticket id',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'created_at' => [
          'type' => 'varchar',
          'mysql_type' => 'datetime',
          'not null' => FALSE,
        ],
        'updated_at' => [
          'type' => 'varchar',
          'mysql_type' => 'datetime',
          'not null' => FALSE,
        ],
        'email' => [
          'description' => 'The email',
          'type' => 'varchar',
          // @see https://stackoverflow.com/a/574698/2502647
          'length' => 256,
          'not null' => TRUE,
          'default' => '',
        ],
        'data' => [
          'description' => 'Ticket data (JSON)',
          'type' => 'text',
          'size' => 'big',
          'not null' => TRUE,
          'default' => '{}',
        ],
      ],
      'primary key' => [
        'entity_type',
        'entity_id',
        'bundle',
        'ticket_id',
      ],
      'indexes' => [
        'email' => [
          'email',
        ],
      ],
    ],
  ];
}

/**
 * Create custom Deskpro data table.
 */
function hoeringsportal_deskpro_update_8001() {
  /** @var \Drupal\Core\Database\Connection $connection */
  $connection = \Drupal::service('database');
  $schema = $connection->schema();

  $tables = [
    'hoeringsportal_deskpro_deskpro_data' => [
      'description' => 'Table to hold information about Deskpro data for nodes.',
      'fields' => [
        'entity_type' => [
          'description' => 'The entity type',
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
        ],
        'entity_id' => [
          'description' => 'The entity id',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'bundle' => [
          'description' => 'The entity bundle',
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
        ],
        'data' => [
          'description' => 'Deskpro data (JSON)',
          'type' => 'text',
          'size' => 'big',
          'not null' => TRUE,
          'default' => '{}',
        ],
      ],
      'primary key' => [
        'entity_type',
        'entity_id',
        'bundle',
      ],
    ],
  ];

  foreach ($tables as $table => $spec) {
    $schema->createTable($table, $spec);
  }
}

/**
 * Move Deskpro data to custom table and remove Deskpro data field.
 */
function hoeringsportal_deskpro_update_8002() {
  /** @var \Drupal\Core\Database\Connection $connection */
  $connection = \Drupal::service('database');

  // Copy data from field_deskpro_data to out custom table.
  // @see https://www.drupal.org/docs/drupal-apis/database-api/insert-queries#inserting-result-select
  $query = $connection->select('node__field_deskpro_data', 'n');
  $query->fields('n', [
    'bundle',
    'entity_id',
    'field_deskpro_data_value',
  ]);

  $connection
    ->insert('hoeringsportal_deskpro_deskpro_data')
    ->fields(['bundle', 'entity_id', 'data'])
    ->from($query)
    ->execute();

  $connection->update('hoeringsportal_deskpro_deskpro_data')
    ->fields([
      'entity_type' => 'node',
    ])
    ->execute();
}

/**
 * Create custom Deskpro tickets table.
 */
function hoeringsportal_deskpro_update_8003() {
  /** @var \Drupal\Core\Database\Connection $connection */
  $connection = \Drupal::service('database');
  $schema = $connection->schema();

  $tables = [
    'hoeringsportal_deskpro_deskpro_tickets' => [
      'description' => 'Table to hold information about Deskpro tickets for nodes.',
      'fields' => [
        'entity_type' => [
          'description' => 'The entity type',
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
        ],
        'entity_id' => [
          'description' => 'The entity id',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'bundle' => [
          'description' => 'The entity bundle',
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
        ],
        'ticket_id' => [
          'description' => 'The ticket id',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'created_at' => [
          'type' => 'varchar',
          'mysql_type' => 'datetime',
          'not null' => FALSE,
        ],
        'updated_at' => [
          'type' => 'varchar',
          'mysql_type' => 'datetime',
          'not null' => FALSE,
        ],
        'email' => [
          'description' => 'The email',
          'type' => 'varchar',
          // @see https://stackoverflow.com/a/574698/2502647
          'length' => 256,
          'not null' => TRUE,
          'default' => '',
        ],
        'data' => [
          'description' => 'Ticket data (JSON)',
          'type' => 'text',
          'size' => 'big',
          'not null' => TRUE,
          'default' => '{}',
        ],
      ],
      'primary key' => [
        'entity_type',
        'entity_id',
        'bundle',
        'ticket_id',
      ],
      'indexes' => [
        'email' => [
          'email',
        ],
      ],
    ],
  ];

  foreach ($tables as $table => $spec) {
    $schema->createTable($table, $spec);
  }
}

/**
 * Move Deskpro data to custom tickets table.
 */
function hoeringsportal_deskpro_update_8004(&$sandbox) {
  $connection = \Drupal::database();

  // Use the sandbox at your convenience to store the information needed
  // to track progression between successive calls to the function.
  if (!isset($sandbox['progress'])) {

    // The count of nodes visited so far.
    $sandbox['progress'] = 0;

    // Total nodes that must be visited.
    $sandbox['max'] = $connection
      ->query('SELECT COUNT(nid) FROM {node} WHERE type = \'hearing\'')
      ->fetchField();

    // A place to store messages during the run.
    $sandbox['messages'] = [];

    // Last node read via the query.
    $sandbox['current_node'] = -1;
  }

  // Process a single node at a time.
  $limit = 1;

  $query = $connection
    ->select('node', 'n');
  $query
    ->fields('n', [
      'nid',
    ]);
  $result = $query
    ->where('n.nid > :nid AND type = \'hearing\'', [
      ':nid' => $sandbox['current_node'],
    ])
    ->range(0, $limit)
    ->orderBy('n.nid', 'ASC')
    ->execute();

  foreach ($result as $row) {
    $node = Node::load($row->nid);

    $record = $connection
      ->select('hoeringsportal_deskpro_deskpro_data', 'd')
      ->fields('d')
      ->condition('entity_type', 'node', '=')
      ->condition('entity_id', $node->id(), '=')
      ->condition('bundle', $node->bundle(), '=')
      ->execute()
      ->fetch();

    $data = json_decode($record->data, TRUE);

    if (!empty($data['tickets'])) {
      // Insert data for each ticket into custom database table.
      $values = array_map(static function (array $ticket) use ($node) {
        $created_at = (new DrupalDateTime($ticket['date_created']))->format(DrupalDateTime::FORMAT);
        return [
          'entity_type' => 'node',
          'entity_id' => $node->id(),
          'bundle' => $node->bundle(),
          'ticket_id' => $ticket['id'],
          'created_at' => $created_at,
          'updated_at' => $created_at,
          'email' => $ticket['person_email'],
          'data' => json_encode($ticket),
        ];
      }, $data['tickets']);

      $query = $connection
        ->insert('hoeringsportal_deskpro_deskpro_tickets')
        ->fields(array_keys(reset($values)));
      foreach ($values as $v) {
        $query->values($v);
      }
      $query->execute();
    }

    // Update our progress information.
    $sandbox['progress']++;
    $sandbox['current_node'] = $node->id();
  }

  // Set the "finished" status, to tell batch engine whether this function
  // needs to run again. If you set a float, this will indicate the progress
  // of the batch so the progress bar will update.
  $sandbox['#finished'] = $sandbox['progress'] >= $sandbox['max'] ? TRUE : $sandbox['progress'] / $sandbox['max'];

  // Set up a per-run message; Make a copy of $sandbox so we can change it.
  // This is simply a debugging stanza to illustrate how to capture status
  // from each pass through hook_update_N().
  $sandbox_status = $sandbox;

  // Don't want them in the output.
  unset($sandbox_status['messages']);
  if ($sandbox['#finished']) {

    // hook_update_N() may optionally return a string which will be displayed
    // to the user.
    return t('Batch finished');
  }
}

/**
 * Drop hoeringsportal_deskpro_deskpro_data table.
 */
function hoeringsportal_deskpro_update_8005(&$sandbox) {
  /** @var \Drupal\Core\Database\Connection $connection */
  $connection = \Drupal::service('database');
  $schema = $connection->schema();
  $schema->dropTable('hoeringsportal_deskpro_deskpro_data');
}
