<?php

/**
 * @file
 * Install and update hooks for hoeringsportal_data.
 */

use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
use Drupal\Core\Entity\Sql\SqlContentEntityStorageException;
use Drupal\hoeringsportal_data\Plugin\Field\FieldType\MapItem;

/**
 * Lifted from google_map_field.install.
 *
 * @param array $columns_to_add
 *   The column names to add.
 * @param string $field_id
 *   The field to add columns to.
 */
function _hoeringsportal_data_add_columns_to_schema(array $columns_to_add, $field_id) {
  $field_type_manager = \Drupal::service('plugin.manager.field.field_type');
  $field_definition = $field_type_manager->getDefinition($field_id);
  $field_item_class = $field_definition['class'];

  $schema = \Drupal::database()->schema();
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $entity_field_map = $entity_field_manager->getFieldMapByFieldType($field_id);

  // The key-value collection for tracking installed storage schema.
  $entity_storage_schema_sql = \Drupal::keyValue('entity.storage_schema.sql');
  $entity_definitions_installed = \Drupal::keyValue('entity.definitions.installed');

  $processed_fields = [];

  foreach ($entity_field_map as $entity_type_id => $field_map) {
    $entity_storage = $entity_type_manager->getStorage($entity_type_id);
    // Only SQL storage based entities are supported / throw known exception.
    if (!($entity_storage instanceof SqlContentEntityStorage)) {
      continue;
    }
    $entity_type = $entity_type_manager->getDefinition($entity_type_id);
    $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
    /** @var Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
    $table_mapping = $entity_storage->getTableMapping($field_storage_definitions);
    // Only need field storage definitions of map fields.
    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition */
    foreach (array_intersect_key($field_storage_definitions, $field_map) as $field_storage_definition) {
      $field_name = $field_storage_definition->getName();
      try {
        $table = $table_mapping->getFieldTableName($field_name);
      }
      catch (SqlContentEntityStorageException $e) {
        // Custom storage? Broken site? No matter what, if there is no table
        // or column, there's little we can do.
        continue;
      }
      // See if the field has a revision table.
      $revision_table = NULL;
      if ($entity_type->isRevisionable() && $field_storage_definition->isRevisionable()) {
        if ($table_mapping->requiresDedicatedTableStorage($field_storage_definition)) {
          $revision_table = $table_mapping->getDedicatedRevisionTableName($field_storage_definition);
        }
        elseif ($table_mapping->allowsSharedTableStorage($field_storage_definition)) {
          $revision_table = $entity_type->getRevisionDataTable() ?: $entity_type->getRevisionTable();
        }
      }
      // Load the installed field schema so that it can be updated.
      $schema_key = "$entity_type_id.field_schema_data.$field_name";
      $field_schema_data = $entity_storage_schema_sql->get($schema_key);

      $processed_fields[] = [$entity_type_id, $field_name];
      // Loop over each new column and add it as a schema column change.
      foreach ($columns_to_add as $column_id) {
        $column = $table_mapping->getFieldColumnName($field_storage_definition, $column_id);
        // Add `initial_from_field` to the new spec, as this will copy over
        // the entire data.
        $field_schema = $field_item_class::schema($field_storage_definition);
        $spec = $field_schema['columns'][$column_id];
        // Add the new column.
        $schema->addField($table, $column, $spec);

        // Add the new column to the revision table.
        if ($revision_table) {
          $schema->addField($revision_table, $column, $spec);
        }

        // Add the new column to the installed field schema.
        if ($field_schema_data) {
          $field_schema_data[$table]['fields'][$column] = $field_schema['columns'][$column_id];
          $field_schema_data[$table]['fields'][$column]['not null'] = FALSE;
          if ($revision_table) {
            $field_schema_data[$revision_table]['fields'][$column] = $field_schema['columns'][$column_id];
            $field_schema_data[$revision_table]['fields'][$column]['not null'] = FALSE;
          }
        }
      }

      // Save changes to the installed field schema.
      if ($field_schema_data) {
        $entity_storage_schema_sql->set($schema_key, $field_schema_data);
      }
      if ($table_mapping->allowsSharedTableStorage($field_storage_definition)) {
        $key = "$entity_type_id.field_storage_definitions";
        if ($definitions = $entity_definitions_installed->get($key)) {
          $definitions[$field_name] = $field_storage_definition;
          $entity_definitions_installed->set($key, $definitions);
        }
      }
    }
  }
}

/**
 * Add "point" to Map item field.
 */
function hoeringsportal_data_update_8001() {
  $columns_to_add = [MapItem::TYPE_POINT];
  $field_id = 'hoeringsportal_data_map';

  _hoeringsportal_data_add_columns_to_schema($columns_to_add, $field_id);
}

/**
 * Set correct formula for Danish pluralization.
 */
function hoeringsportal_data_update_10001() {
  // @see https://blokspeed.net/2020/tale-mistranslated-plurals
  $formulae = \Drupal::state()->get('locale.translation.formulae', []);
  if (isset($formulae['da'])) {
    $formulae['da'] = [
      'plurals' => 2,
      'formula' => '(n!=1)',
    ];
    \Drupal::state()->set('locale.translation.formulae', $formulae);
  }
}

/**
 * Set correct formula for Danish pluralization (the one set in
 * hoeringsportal_data_update_10001 is NOT correct).
 */
function hoeringsportal_data_update_10002() {
  $formulae = \Drupal::state()->get('locale.translation.formulae', []);
  if (isset($formulae['da'])) {
    // "Plural-Forms: nplurals=2; plural=(n != 1);"
    $formulae['da'] = [
      'plurals' => 2,
      'formula' => [
        1 => 0,
        'default' => 1,
      ],
    ];
    \Drupal::state()->set('locale.translation.formulae', $formulae);
  }
}
