<?php

/**
 * @file
 * Module for public meeting content type.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Set last meeting time for public meeting, based on Pretix field time_to
 * values.
 */
function hoeringsportal_public_meeting_node_presave(NodeInterface $node) {
  if (Drupal::currentUser()->isAuthenticated() && $node->bundle() === 'public_meeting') {
    $pretix_field_name = 'field_pretix_dates';
    $first_meeting_field_name = 'field_first_meeting_time';
    $last_meeting_field_name = 'field_last_meeting_time';
    $pretix_field = $node->hasField($pretix_field_name) ? $node->get($pretix_field_name) : NULL;
    $first_meeting = $node->hasField($first_meeting_field_name) ? $node->get($first_meeting_field_name) : NULL;
    $last_meeting = $node->hasField($last_meeting_field_name) ? $node->get($last_meeting_field_name) : NULL;
    if ('pretix' === $node->field_signup_selection->value) {
      if ($pretix_field) {
        $pretix_type = $pretix_field->getFieldDefinition()->getType();
        if ($pretix_type == 'pretix_date') {
          if ($first_meeting && $last_meeting) {
            $values = $pretix_field->getValue();
            // Only act if values were found.
            if ($values) {
              // Set a comparable value for first_time possible.
              $first_time = $values[0]['time_from'];
              $last_time = new DrupalDateTime('2001-01-01');
              // Determine latest possible value.
              foreach ($values as $value) {
                if ($value['time_from'] < $first_time) {
                  $first_time = $value['time_from'];
                }

                if ($value['time_to'] > $last_time) {
                  $last_time = $value['time_to'];
                }
              }
              $format = DateTimeItemInterface::DATETIME_STORAGE_FORMAT;
              $node->set($first_meeting_field_name, $first_time->format($format, ['timezone' => 'UTC']));
              $node->set($last_meeting_field_name, $last_time->format($format, ['timezone' => 'UTC']));
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Change the display of the form depending on signup selection.
 */
function hoeringsportal_public_meeting_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_public_meeting_edit_form' || $form_id == 'node_public_meeting_form') {
    $form['field_registration_deadline']['#states'] = [
      'invisible' => [
        ':input[name="field_signup_selection"]' => ['value' => 'hidden'],
      ],
    ];
    $form['field_last_meeting_time']['#states'] = [
      'invisible' => [
        ':input[name="field_signup_selection"]' => ['value' => 'pretix'],
      ],
    ];
    $form['field_pretix_dates']['#states'] = [
      'visible' => [
        ':input[name="field_signup_selection"]' => ['value' => 'pretix'],
      ],
    ];

    // Show pretix sub-event shop urls only when sign-up is hidden.
    foreach ($form['field_pretix_dates']['widget'] as $key => &$value) {
      if (is_int($key) && isset($value['pretix_links']['pretix_subevent_shop_url'])) {
        $value['pretix_links']['pretix_subevent_shop_url']['#states'] = [
          'visible' => [
            ':input[name="field_hidden_signup[value]"]' => ['checked' => TRUE],
          ],
        ];
      }
    }

    $form['field_pretix_event_settings']['#states'] = [
      'visible' => [
        ':input[name="field_signup_selection"]' => ['value' => 'pretix'],
      ],
    ];
    $form['field_signup_link']['#states'] = [
      'visible' => [
        ':input[name="field_signup_selection"]' => ['value' => 'manual'],
      ],
    ];
    $form['field_signup_text']['#states'] = [
      'visible' => [
        ':input[name="field_signup_selection"]' => ['value' => 'manual'],
      ],
    ];

    $form['#after_build'][] = 'hoeringsportal_public_meeting_alter_form_after_build';
  }
}

/**
 * After build function for form in order to have all parts of the date fields.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return array
 *   The altered form.
 */
function hoeringsportal_public_meeting_alter_form_after_build(array $form, FormStateInterface &$form_state) {
  // Add custom field validation for last meeting.
  array_unshift($form['field_last_meeting_time']['widget'][0]['value']['#element_validate'], 'hoeringsportal_public_meeting_last_meeting_validate');
  return $form;
}

/**
 * Custom validation function to ensure that a last_meeting_time is always set.
 *
 * @param array $element
 *   The element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function hoeringsportal_public_meeting_last_meeting_validate(array $element, FormStateInterface &$form_state) {
  $signup_selection = $form_state->getValue('field_signup_selection')[0]['value'];
  if ($signup_selection == 'manual') {
    $last_time_values = $form_state->getValue('field_last_meeting_time')[0]['value'];
    if (empty($last_time_values['object'])) {
      $form_state->setErrorByName('field_last_meeting_time',
        t('Please enter a value!'));
    }
  }
}
