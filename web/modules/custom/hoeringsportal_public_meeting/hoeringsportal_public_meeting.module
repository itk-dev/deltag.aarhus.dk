<?php
/**
 * @file
 * Module for public meeting content type.
 */

use Drupal\node\NodeInterface;

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Set last meeting time for public meeting, based on Pretix field time_to values.
 */
function hoeringsportal_public_meeting_node_presave(NodeInterface $node) {
  $user = Drupal::currentUser();
  if ($user->id() > 0 && $node->bundle() == 'public_meeting') {
    $last_time = 0;
    $last_meeting_string = '';
    // Define fields to work on.
    $pretix_field_name = 'field_pretix_dates';
    $first_meeting_field_name = 'field_first_meeting_time';
    $last_meeting_field_name = 'field_last_meeting_time';
    $pretix_field = $node->hasField($pretix_field_name) ? $node->get($pretix_field_name) : NULL;
    $first_meeting = $node->hasField($first_meeting_field_name) ? $node->get($first_meeting_field_name) : NULL;
    $last_meeting = $node->hasField($last_meeting_field_name) ? $node->get($last_meeting_field_name) : NULL;
    if ($pretix_field) {
      $pretix_type = $pretix_field->getFieldDefinition()->getType();
      if ($pretix_type == 'pretix_date_field_type') {
        if ($first_meeting && $last_meeting) {
          $values = $pretix_field->getValue();
          // Set a comparable value for first_time possible.
          $first_time = $values[0]['time_from']->getTimestamp();
          $first_meeting_string = $values[0]['time_from']->format('Y-m-d\TH:i:s');
          // Determine latest possible value.
          foreach($values as $value) {
            if ($value['time_from']->getTimestamp() < $first_time) {
              $first_meeting_string = $value['time_from']->format('Y-m-d\TH:i:s');
              $first_time = $value['time_from']->getTimestamp();
            }

            if ($value['time_to']->getTimestamp() > $last_time) {
              $last_meeting_string = $value['time_to']->format('Y-m-d\TH:i:s');
              $last_time = $value['time_to']->getTimestamp();
            }
          }
          // Only act if values were found.
          if ($values) {
            $node->set($first_meeting_field_name, $first_meeting_string);
            $node->set($last_meeting_field_name, $last_meeting_string);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Change the display of the form depending on signup selection.
 */
function hoeringsportal_public_meeting_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_public_meeting_edit_form' || $form_id == 'node_public_meeting_form') {
    $form['field_registration_deadline']['#states'] = array(
      'invisible' => [
        ':input[name="field_signup_selection"]' => ['value' => 'hidden'],
      ],
    );
    $form['field_pretix_dates']['#states'] = array(
      'visible' => [
        ':input[name="field_signup_selection"]' => ['value' => 'pretix'],
      ],
    );
    $form['field_signup_link']['#states'] = array(
      'visible' => [
        ':input[name="field_signup_selection"]' => ['value' => 'manual'],
      ],
    );
    $form['field_signup_text']['#states'] = array(
      'visible' => [
        ':input[name="field_signup_selection"]' => ['value' => 'manual'],
      ],
    );
    $form['field_hidden_signup_link']['#states'] = array(
      'visible' => [
        ':input[name="field_signup_selection"]' => ['value' => 'hidden'],
      ],
    );
  }
}
